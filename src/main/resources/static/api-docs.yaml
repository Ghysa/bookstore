openapi: 3.0.3
info:
  title: Capgemini Bookstore Application
  description: A place to order your favorite books!
  version: v1
  contact:
    email: sam.ghysels@capgemini.com
    name: Sam Ghysels
servers:
  - url: http://localhost:8080/api/v1
    description: Local development
paths:
  /books:
    get:
      tags:
        - book-controller
      operationId: getAllBooks
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Books'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - book-controller
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: CREATED
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /books/{id}:
    get:
      tags:
        - book-controller
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /carts:
    post:
      tags:
        - cart-controller
      operationId: createCart
      responses:
        '201':
          description: CREATED
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /carts/{id}:
    get:
      tags:
        - cart-controller
      operationId: getCart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /carts/{id}/item:
    post:
      tags:
        - cart-controller
      operationId: addCartItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /carts/{id}/order:
    post:
      tags:
        - cart-controller
      operationId: createOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '201':
          description: CREATED
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /orders/{id}:
    get:
      tags:
        - order-controller
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /users:
    post:
      tags:
        - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: CREATED
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /userinfo:
    get:
      tags:
        - user-controller
      operationId: getUserInfo
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /login:
    post:
      tags:
        - login-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
components:
  schemas:
    Book:
      required:
        - title
        - author
        - price
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        author:
          type: string
        releaseDate:
          type: string
          format: date
        price:
          type: number
          format: double
          minimum: 0
    Books:
      required:
        - books
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int32
        user:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        total:
          type: number
          format: double
    Item:
      type: object
      required:
        - bookId
      properties:
        id:
          type: integer
          format: int32
        bookId:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
          minimum: 0
    Order:
      allOf:
        - $ref: '#/components/schemas/Cart'
        - type: object
          properties:
            orderDate:
              type: string
              format: date-time
    User:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        role:
          type: string
        firstname:
          type: string
        lastname:
          type: string
    Login:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Token:
      required:
        - access_token
        - token_type
        - expires_in
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: string
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    400:
      description: Bad Request
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    401:
      description: Unauthorized
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    500:
      description: Internal Server Error
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []